import React, { useState } from "react";
import { auth } from "../firebaseConfig";
import {
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
} from "firebase/auth";

const LoginPage = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isRegistering, setIsRegistering] = useState(false);
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // üîê –£–≤—ñ–π—Ç–∏ –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
      let userCredential;
      if (isRegistering) {
        userCredential = await createUserWithEmailAndPassword(auth, email, password);
      } else {
        userCredential = await signInWithEmailAndPassword(auth, email, password);
      }
    
      // üîë –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω
      const idToken = await userCredential.user.getIdToken();
    
      // üì° –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–æ–∫–µ–Ω –Ω–∞ –±–µ–∫–µ–Ω–¥
      const response = await fetch("http://localhost:8000/auth/verify-token", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${idToken}`,
        },
        body: JSON.stringify({ email }),
      });
    
      const data = await response.json();

      console.log(response)
    
      if (response.ok) {
        setMessage(`‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ü—Ä–∏–≤—ñ—Ç, ${data.name || email}`);
      } else {
        // üëâ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø–æ–º–∏–ª–∫–æ—é ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–æ—á–∞ –± —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
        setMessage(`‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Firebase, –∞–ª–µ —Å–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–æ—é: ${data.detail}`);
      }
    } catch (err) {
      console.error(err);
    
      // üéØ –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —Ü–µ —Å–∞–º–µ fetch, —á–∏ —â–æ—Å—å —ñ–Ω—à–µ
      if (err.message.includes("Failed to fetch")) {
        setMessage("‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Firebase, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–µ–∫–µ–Ω–¥—É.");
      } else {
        setMessage("‚ùå –ü–æ–º–∏–ª–∫–∞: " + err.message);
      }
    }    
  };

  return (
    <div style={{ maxWidth: 400, margin: "auto", padding: 20 }}>
      <h2>{isRegistering ? "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" : "–í—Ö—ñ–¥"}</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          style={{ width: "100%", marginBottom: 10 }}
        />
        <input
          type="password"
          placeholder="–ü–∞—Ä–æ–ª—å"
          required
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          style={{ width: "100%", marginBottom: 10 }}
        />
        <button type="submit" style={{ width: "100%" }}>
          {isRegistering ? "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è" : "–£–≤—ñ–π—Ç–∏"}
        </button>
      </form>
      <p style={{ marginTop: 10 }}>
        {isRegistering ? "–í–∂–µ —î –∞–∫–∞—É–Ω—Ç?" : "–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—É?"}{" "}
        <button
          onClick={() => {
            setIsRegistering(!isRegistering);
            setMessage("");
          }}
        >
          {isRegistering ? "–£–≤—ñ–π—Ç–∏" : "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"}
        </button>
      </p>
      {message && <p>{message}</p>}
    </div>
  );
};

export default LoginPage;
